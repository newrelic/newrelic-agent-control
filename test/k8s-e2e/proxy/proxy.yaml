# Activate calico cni to use NetworkPolicy minikube start --cni calico
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-mitmproxy
spec:
  # Block any egress comms to any pod in this ns...
  policyTypes:
  - Egress

  # except for the proxy pod (so it can connect to outside)
  podSelector:
    matchExpressions:
      - { key: app, operator: NotIn, values: [mitmproxy] }

  # Allow...
  egress:
  # all internal cluster comms between pods.
  - to:
    - podSelector: {}
  # and all comms between pods and nodes(needed to allow kubelet container probes).
  - to:
    - ipBlock:
        cidr: 10.0.0.0/8
    - ipBlock:
        cidr: 192.168.0.0/16
---
# Create a PersistentVolume and PersistentVolumeClaim for mitmproxy CA certs
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mitm-ca
spec:
  capacity:
    storage: 1Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /tmp/mitm-ca
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mitm-ca-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mitmproxy
  labels:
    app: mitmproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mitmproxy
  template:
    metadata:
      labels:
        app: mitmproxy
    spec:
      containers:
      - name: mitmproxy-container
        image: mitmproxy/mitmproxy
        command: ["mitmweb"]
        args:
        - "--web-host"
        - "0.0.0.0"
        - "--set"
        # - "web_password=uncomment-for-troubleshooting"
        ports:
        - containerPort: 8080
        # Certs generated by MITM-Proxy
        # https://docs.mitmproxy.org/stable/concepts/certificates/#the-mitmproxy-certificate-authority
        volumeMounts:
        - mountPath: /root/.mitmproxy
          name: shared-volume-ca
      volumes:
      - name: shared-volume-ca
        persistentVolumeClaim:
          claimName: mitm-ca-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mitmproxy-service
spec:
  selector:
    app: mitmproxy
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: batch/v1
kind: Job
metadata:
  name: assert-policy-proxy
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: alpine-container
        image: alpine/curl
        command:
        - sh
        - -c
        - |
          # Test that connections are blocked 
          curl --max-time 1 -I -L https://newrelic.com/
          if [ $? -eq 0 ]; then
            echo "Connection is not blocked by the NetworkPolicy"
            exit 1
          fi

          # Add proxy cert to root store 
          cat /proxy-ca/mitmproxy-ca-cert.pem >> /etc/ssl/certs/ca-certificates.crt
          cp /etc/ssl/certs/ca-certificates.crt /proxy-ca/ca-certificates.crt

          # Test that proxy is working
          curl --max-time 1 --proxy http://mitmproxy-service:8080 -I -L https://newrelic.com/
        volumeMounts:
        - mountPath: /proxy-ca/
          name: shared-volume-ca
      volumes:
      - name: shared-volume-ca
        persistentVolumeClaim:
          claimName: mitm-ca-pvc
