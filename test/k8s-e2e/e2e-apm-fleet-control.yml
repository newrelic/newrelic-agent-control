description: E2E Test

custom_test_key: appName

scenarios:
  - description: Deploy SA with APM operator and Java, Python and Node.js agents
    before:
      - kubectl get secret sys-identity || kubectl create secret generic sys-identity --from-literal=CLIENT_ID="${NR_SYSTEM_IDENTITY_CLIENT_ID}" --from-literal=private_key="${NR_SYSTEM_IDENTITY_PRIVATE_KEY}"
      - cd ../../ && SA_CHART_VALUES_FILE="test/k8s-e2e/agent-control-apm-fleet-control.yml" CLUSTER=${SCENARIO_TAG} tilt ci
      # we need wait and retry since the resource might me not created yet
      - timeout 600s bash -c "until kubectl wait --for=jsonpath='{.status.readyReplicas}'=1 deploy/operator-k8s-agents-operator; do sleep 5; echo waiting on operator ; done"
      - sleep 60
      - kubectl run ${SCENARIO_TAG}-python --dry-run=client --image=ghcr.io/open-telemetry/opentelemetry-operator/e2e-test-app-python:main -o yaml | kubectl label app=pythonapp -f - --local -o yaml | kubectl create -f -
      - kubectl run ${SCENARIO_TAG}-java --dry-run=client --image=ghcr.io/open-telemetry/opentelemetry-operator/e2e-test-app-java:main -o yaml | kubectl label app=javaapp -f - --local -o yaml | kubectl create -f -
      - kubectl run ${SCENARIO_TAG}-dotnet --dry-run=client --image=ghcr.io/open-telemetry/opentelemetry-operator/e2e-test-app-dotnet:main -o yaml | kubectl label app=dotneteapp -f - --local -o yaml | kubectl create -f -
      - kubectl run ${SCENARIO_TAG}-node --dry-run=client --image=ghcr.io/open-telemetry/opentelemetry-operator/e2e-test-app-nodejs:main -o yaml --command -- sh -c "yarn add express && node index.js" | kubectl label app=nodeapp -f - --local -o yaml | kubectl create -f -
      - kubectl create -f ./rubyapp.yaml --dry-run=client -o yaml | sed s/placeholder/${SCENARIO_TAG}-ruby/ | kubectl create -f -

      # Generate some traffic
      - kubectl wait --for=condition=Ready --all pods --timeout 5m
      - timeout 60s bash -c "until kubectl exec ${SCENARIO_TAG}-python -c ${SCENARIO_TAG}-python -- wget -qO /dev/null 127.0.0.1:8080; do echo 'Python not ready yet. Retrying...';sleep 5;done"
      - seq 100 | xargs -I{} kubectl exec ${SCENARIO_TAG}-python -c ${SCENARIO_TAG}-python -- wget -qO /dev/null 127.0.0.1:8080
      - timeout 60s bash -c "until kubectl exec ${SCENARIO_TAG}-node -c ${SCENARIO_TAG}-node -- wget -qO /dev/null 127.0.0.1:3000; do echo 'Node not ready yet. Retrying...';sleep 5;done"
      - seq 100 | xargs -I{} kubectl exec ${SCENARIO_TAG}-node -c ${SCENARIO_TAG}-node -- wget -qO /dev/null 127.0.0.1:3000
      - timeout 60s bash -c "until kubectl exec ${SCENARIO_TAG}-ruby -c ${SCENARIO_TAG}-ruby -- wget -qO /dev/null 127.0.0.1:9292; do echo 'Ruby not ready yet. Retrying...';sleep 5;done"
      - seq 100 | xargs -I{} kubectl exec ${SCENARIO_TAG}-ruby -c ${SCENARIO_TAG}-ruby -- wget -qO /dev/null 127.0.0.1:9292
      # dotnet image does not have wget available, we use one from a different pod
      - seq 100 | xargs -I{} kubectl exec ${SCENARIO_TAG}-ruby -c ${SCENARIO_TAG}-ruby -- wget -qO /dev/null `kubectl get pod ${SCENARIO_TAG}-dotnet -o json | jq -r .status.podIP`
    after:
      - kubectl logs -l app.kubernetes.io/name=agent-control --all-containers --prefix=true
      - kubectl logs -l app.kubernetes.io/instance=operator --all-containers --prefix=true
      - kubectl get all -o wide
      - cd ../../ && tilt down
    tests:
      scripts:
        - echo 'Hit agent control health endpoint'
        - POD_NAME=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep 'agent-control')
        - if [ -z "$POD_NAME" ]; then
        -  echo "No pod found with name starting with 'agent-control'"
        -  exit 1
        - fi
        - kubectl port-forward pods/${POD_NAME} 51200 &
        - PORT_FORWARD_PID=$!
        - sleep 5
        - response=$(curl -s "http://localhost:51200/status")
        - for agent in dotnet-agent java-agent node-agent python-agent ruby-agent; do
        - agent_status=$(echo "$response" | jq -r ".sub_agents[\"${agent}\"].healthy")
        - if [ "$agent_status" = "true" ]; then
        -  echo "${agent} is healthy. Success."
        - else
        -  echo "${agent} is not healthy. Failing..."
        -  kill $PORT_FORWARD_PID
        -  exit 1
        - fi
        - done
        - kill $PORT_FORWARD_PID
