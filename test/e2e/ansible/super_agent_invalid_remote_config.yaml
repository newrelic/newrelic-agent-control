---

- name: Super Agent Invalid Remote Config
  hosts: testing_hosts_linux
  become: true
  gather_facts: yes

  tasks:

    - name: Fresh Super Agent installation with InfraAgent and NRDOT and Host monitoring NR
      include_tasks: ./tasks/fresh_sa_install_host_monitor_nr_{{ ansible_system }}.yaml

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: otel_process_pid

    # Create Fleet
    - name: create fleet
      include_role:
        name: fleet_api_request
      vars:
        create_fleet:
          account_id: "{{ nr_account_id | int }}"
          name: "{{ e2e_run_name }}"
          entity_type: "HOST"
          fleet_guid_fact: "fleet_guid"

    - name: set remote config name
      set_fact:
        remote_config_name: "caos-e2e-invalid-super-agent-config-{{ ansible_date_time.iso8601_micro | to_uuid }}"

    - name: create remote configuration for super-agent
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration:
          account_id: "{{ nr_account_id | int }}"
          config_name: "{{ remote_config_name }}"
          agent_type: "NR_SuperAgent"
          config_type: "NR_SuperAgentPrimary"
          config_id_fact: "created_config_id"

    - name: create invalid config revision for the Super Agent
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration_revision:
          account_id: "{{ nr_account_id | int }}"
          config_id: "{{ created_config_id }}"
          content: 'valid_yaml: that cannot be deserialized to struct'
          config_revision_fact: "created_config_revision"

    - name: register array of configurations to deploy
      ansible.builtin.set_fact: {"configurations": [{"revision_number":"{{ created_config_revision | int }}", "configuration_id":"{{ created_config_id | int }}" }]}

    - name: deploy fleet add entity and configurations
      include_role:
        name: fleet_api_request
      vars:
        deploy_fleet:
          account_id: "{{ nr_account_id | int }}"
          fleet_guid: "{{ fleet_guid }}"
          name: "{{ e2e_run_name }}"
          configurations: "{{ configurations }}"
          add_entity_guid: "{{ host_entity_guid }}"

    - name: Get NR Super Agent InstanceID
      include_tasks: ./tasks/get_identifier_field_{{ ansible_system }}.yaml
      vars:
        agent_identifier_path: "{{ super_agent_identifiers_file }}"
        identifier_field: "instance_id"
        identifier_field_fact: "super_agent_instance_id"

    - name: Wait for a few seconds for the config to be retrieved
      ansible.builtin.pause:
        seconds: 40

    - name: Check for Super Agent remote config
      stat:
        path: "{{ super_agent_remote_config_file }}"
      register: result

    - name: Assert that the config was not retrieved
      assert:
        that: not result.stat.exists

    - name: get latest logs from the Super Agent
      shell: 'journalctl -u newrelic-super-agent --since "2min ago" | grep -E "Error applying Super Agent remote config: could not resolve config: .configuration is not valid YAML: .missing field .agents"'
      register: journalctl_log

    - name: Assert Super Agent and Agents are still running
      include_role:
        name: caos.ansible_roles.assert_process_running
      vars:
        processes_running:
          - "^/usr/bin/newrelic-super-agent"
          - "^/usr/bin/newrelic-infra"
          - "^/usr/bin/nr-otel-collector"

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: new_infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: new_otel_process_pid

    - name: assert the previous and current pid are the same
      assert:
        that:
          - "{{ new_infra_agent_process_pid == infra_agent_process_pid }}"
          - "{{ new_otel_process_pid == otel_process_pid }}"

    - name: create invalid config for the Super Agent with invalid Agent Type
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration_revision:
          account_id: "{{ nr_account_id | int }}"
          config_id: "{{ created_config_id }}"
          content: 'agents:\n  nr-infra-agento:\n    agent_type: \"newrelic/com.newrelic.infrastructureoo:0.1.2\"\n'
          config_revision_fact: "created_config_revision_invalid"

    - name: register array of configurations with invalid Agent Type to deploy
      ansible.builtin.set_fact: {"configurations_invalid": [{"revision_number":"{{ created_config_revision_invalid | int }}", "configuration_id":"{{ created_config_id | int }}" }]}

    - name: deploy fleet add new configuration
      include_role:
        name: fleet_api_request
      vars:
        deploy_fleet:
          account_id: "{{ nr_account_id | int }}"
          fleet_guid: "{{ fleet_guid }}"
          name: "{{ e2e_run_name }}"
          configurations: "{{ configurations_invalid }}"

    - name: Wait for a few seconds for the config to be retrieved and big enough to distinguish the logs
      ansible.builtin.pause:
        seconds: 60

    - name: Check for Super Agent remote config
      stat:
        path: "{{ super_agent_remote_config_file }}"
      register: result

    - name: Assert that the config was not retrieved
      assert:
        that: not result.stat.exists

    - name: get latest logs from the Super Agent
      # We were expecting this error:
      # "Error applying Super Agent remote config: .config assembler error: .error assembling agents: .agent not found..."'
      # But OpAMP call fails because now on the server they return a 500 when an agent_type doesn't exist,
      # so the builder throws the opamp error instead:
      shell: 'journalctl -u newrelic-super-agent --since "1min ago" | grep -E "Error applying Super Agent remote config: .OpAMP client error"'
      register: journalctl_log

    - name: Assert Super Agent and Agents are still running
      include_role:
        name: caos.ansible_roles.assert_process_running
      vars:
        processes_running:
          - "^/usr/bin/newrelic-super-agent"
          - "^/usr/bin/newrelic-infra"
          - "^/usr/bin/nr-otel-collector"

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: new_infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: new_otel_process_pid

    - name: assert the previous and current pid are the same
      assert:
        that:
          - "{{ new_infra_agent_process_pid == infra_agent_process_pid }}"
          - "{{ new_otel_process_pid == otel_process_pid }}"

    - name: delete the fleet
      include_tasks: ./tasks/clean_fleet.yaml
      vars:
        clean_account_id: "{{ nr_account_id | int }}"
        clean_fleet_guid: "{{ fleet_guid }}"
        clean_name: "{{ e2e_run_name }}"
        clean_entity_guid: "{{ host_entity_guid }}"
...
