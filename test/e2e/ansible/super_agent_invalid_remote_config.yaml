---

- name: test invalid remote config for a sub agent
  hosts: testing_hosts_linux
  become: true
  gather_facts: yes

  tasks:

    - name: Fresh Super Agent installation
      include_tasks: ./tasks/fresh_super_agent_installation_{{ ansible_system }}.yaml
      vars:
        infra_agent_type_version: "0.1.2"
        otel_agent_type_version: "0.1.0"

    - name: Assert Super Agent and Agents are running
      include_role:
        name: caos.ansible_roles.assert_process_running
      vars:
        processes_running:
          - "^/usr/bin/newrelic-super-agent"
          - "^/usr/bin/newrelic-infra"
          - "^/usr/bin/nr-otel-collector"

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: otel_process_pid

    - name: set remote config name
      set_fact:
        remote_config_name: "caos-e2e-invalid-super-agent-config-{{ ansible_date_time.iso8601_micro | to_uuid }}"

    - name: create remote configuration
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration:
          account_id: "{{ nr_account_id | int }}"
          config_name: "{{ remote_config_name }}"
          config_id_fact: "created_config_id"

    - name: create invalid config for the Super Agent
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration_revision:
          account_id: "{{ nr_account_id | int }}"
          config_id: "{{ created_config_id }}"
          content: 'valid_yaml: that cannot be deserialized to struct'
          config_revision_fact: "created_config_revision"

    - name: get fleet guid for Super Agent
      include_tasks: ./tasks/fleet_guid_by_agent_type.yaml
      vars:
        fleet_guid_fact: fleet_guid
        agent_type: "NEWRELIC_SUPER"

    - name: deploy config to fleet
      include_role:
        name: fleet_api_request
      vars:
        deploy_config_to_fleet:
          account_id: "{{ nr_account_id | int }}"
          fleet_guid: "{{ fleet_guid }}"
          config_id: "{{ created_config_id | int }}"
          config_revision: "{{ created_config_revision | int }}"

    - name: Get NR Super Agent ULID
      include_tasks: ./tasks/get_identifier_field_{{ ansible_system }}.yaml
      vars:
        agent_identifier_path: "{{ super_agent_identifiers_file }}"
        identifier_field: "ulid"
        identifier_field_fact: "super_agent_ulid"

    - name: authorize Super Agent
      include_role:
        name: fleet_api_request
      vars:
        authorize_agent:
          account_id: "{{ nr_account_id | int }}"
          agent_ulid: "{{ super_agent_ulid }}"

    - name: Wait for a few seconds for the config to be retrieved
      ansible.builtin.pause:
        seconds: 20

    - name: Check for Super Agent remote config
      stat:
        path: "{{ super_agent_remote_config_file }}"
      register: result

    - name: Assert that the config was not retrieved
      assert:
        that: not result.stat.exists

    - name: get latest logs from the Super Agent
      shell: 'journalctl -u newrelic-super-agent --since "1min ago" | grep -E "Error applying Super Agent remote config: could not resolve config: .configuration is not valid YAML: .missing field .agents"'
      register: journalctl_log

    - name: Assert Super Agent and Agents are still running
      include_role:
        name: caos.ansible_roles.assert_process_running
      vars:
        processes_running:
          - "^/usr/bin/newrelic-super-agent"
          - "^/usr/bin/newrelic-infra"
          - "^/usr/bin/nr-otel-collector"

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: new_infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: new_otel_process_pid

    - name: assert the previous and current pid are the same
      assert:
        that:
          - "{{ new_infra_agent_process_pid == infra_agent_process_pid }}"
          - "{{ new_otel_process_pid == otel_process_pid }}"

    - name: create invalid config for the Super Agent with invalid Agent Type
      include_role:
        name: fleet_api_request
      vars:
        create_remote_configuration_revision:
          account_id: "{{ nr_account_id | int }}"
          config_id: "{{ created_config_id }}"
          content: 'agents:\n  nr-infra-agento:\n    agent_type: \"newrelic/com.newrelic.infrastructure_agentoo:0.1.2\"\n'
          config_revision_fact: "created_config_revision_2"

    - name: deploy config to fleet
      include_role:
        name: fleet_api_request
      vars:
        deploy_config_to_fleet:
          account_id: "{{ nr_account_id | int }}"
          fleet_guid: "{{ fleet_guid }}"
          config_id: "{{ created_config_id | int }}"
          config_revision: "{{ created_config_revision_2 | int }}"

    - name: Wait for a few seconds for the config to be retrieved and big enough to distinguish the logs
      ansible.builtin.pause:
        seconds: 60

    - name: Check for Super Agent remote config
      stat:
        path: "{{ super_agent_remote_config_file }}"
      register: result

    - name: Assert that the config was not retrieved
      assert:
        that: not result.stat.exists

    - name: get latest logs from the Super Agent
      shell: 'journalctl -u newrelic-super-agent --since "1min ago" | grep -E "Error applying Super Agent remote config: .config assembler error: .error assembling agents: .agent not found..."'
      register: journalctl_log

    - name: Assert Super Agent and Agents are still running
      include_role:
        name: caos.ansible_roles.assert_process_running
      vars:
        processes_running:
          - "^/usr/bin/newrelic-super-agent"
          - "^/usr/bin/newrelic-infra"
          - "^/usr/bin/nr-otel-collector"

    - name: get the infra agent pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/newrelic-infra --config.*"
        process_pid_fact: new_infra_agent_process_pid

    - name: get the otel collector pid
      include_tasks: ./tasks/process_pid_{{ ansible_system }}.yaml
      vars:
        command_line: "/usr/bin/nr-otel-collector --config.*"
        process_pid_fact: new_otel_process_pid

    - name: assert the previous and current pid are the same
      assert:
        that:
          - "{{ new_infra_agent_process_pid == infra_agent_process_pid }}"
          - "{{ new_otel_process_pid == otel_process_pid }}"
...
