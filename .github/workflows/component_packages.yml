name: ðŸ“ž Build binaries and create packages

on:
  workflow_call:
    inputs:
      pre-release:
        description: 'set to true if running a real pre-release'
        type: boolean
        required: true
      tag_name:
        description: 'tag name for the packages'
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and upload
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: "~1.20"
          check-latest: true

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }} with targets
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: >-
            aarch64-unknown-linux-musl,
            x86_64-unknown-linux-musl

      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Install Zig
        uses: mlugg/setup-zig@v2

      - name: Install cargo-zigbuild
        run: |
          cargo install --locked cargo-zigbuild

      - name: Set tag and skip_upload=false for pre-release
        if: ${{ inputs.pre-release}}
        run: |
          NEWRELIC_AGENT_CONTROL_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' agent-control/Cargo.toml)
          if [ "${NEWRELIC_AGENT_CONTROL_VERSION}" != "${{ inputs.tag_name }}" ]; then
            echo "Package version specified in Cargo.toml (${NEWRELIC_AGENT_CONTROL_VERSION}) differs from tag (${{ inputs.tag_name }}), exiting"
            exit 1
          fi

      - name: Set tag and skip_upload=true for testing
        if: ${{ ! inputs.pre-release }}
        run: |
          git tag ${{ inputs.tag_name }}
          echo SKIP_UPLOAD=--skip=publish >> $GITHUB_ENV 

      - name: Release packages with GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release ${{ env.SKIP_UPLOAD }} --clean --debug --timeout 2h
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
          GPG_MAIL: 'infrastructure-eng@newrelic.com'
          NR_RELEASE_TAG: ${{ inputs.tag_name }}

      - name: Upload assets to pipeline
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: built-binaries
          path: |
            ./bin/*
            ./dist/*
