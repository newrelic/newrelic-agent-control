name: ðŸ“ž Build container images

# This workflow compiles the agent control binary in all supported architectures
# build the multi-arch image and push it to the repo packages registry.  

on:
  workflow_call:
    inputs:
      image-tag:
        description: 'Image tag'
        type: string
        required: true
      push:
        description: 'Push image'
        type: boolean
        required: true

jobs:
  build-image:
    runs-on: ubuntu-latest
    name: Build/Push images
    env:
      DOCKER_IMAGE_NAME: newrelic/newrelic-agent-control
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Build Agent Control for K8s
        env:
          AGENT_CONTROL_VERSION: ${{ inputs.image-tag }}
        run: |
          make build-agent-control BUILD_FEATURE=k8s ARCH=arm64
          make build-agent-control BUILD_FEATURE=k8s ARCH=amd64

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}

      - name: Build and push image
        if: ${{ inputs.push }}
        run: |
          docker buildx build \
            --push \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME:${{ inputs.image-tag }} \
            .

      - name: Build image
        if: ${{ ! inputs.push }}
        run: |
          docker buildx build \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME:${{ inputs.image-tag }} \
            .
