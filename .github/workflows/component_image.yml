name: ðŸ“ž Build container images

# This workflow compiles the agent control binary in all supported architectures
# build the multi-arch image and push it to the repo packages registry.  

on:
  workflow_call:
    inputs:
      image-tag:
        description: 'Image tag'
        type: string
        required: true
      ac-version:
        description: 'Agent Control version to embed in the binary'
        type: string
        required: true
      push:
        description: 'Push image'
        type: boolean
        required: true

jobs:
  build-image:
    runs-on: ubuntu-latest
    name: Build/Push images
    env:
      DOCKER_IMAGE_NAME_AGENT_CONTROL: newrelic/newrelic-agent-control
      DOCKER_IMAGE_NAME_AGENT_CONTROL_CLI: newrelic/newrelic-agent-control-cli
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }} with targets
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: >-
            aarch64-unknown-linux-musl,
            x86_64-unknown-linux-musl

      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release

      - name: Install Zig
        uses: mlugg/setup-zig@v2.0.5

      - name: Install cargo-zigbuild
        run: |
          cargo install --locked cargo-zigbuild --force

      - name: Build Agent Control for K8s
        env:
          AGENT_CONTROL_VERSION: ${{ inputs.ac-version }}
        run: |
          make build-agent-control-k8s ARCH=arm64 PKG=newrelic_agent_control
          make build-agent-control-k8s ARCH=amd64 PKG=newrelic_agent_control
          
          # We do not do it in parallel because most of the dependencies are shared
          make build-agent-control-cli ARCH=arm64 PKG=newrelic_agent_control
          make build-agent-control-cli ARCH=amd64 PKG=newrelic_agent_control

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}

      - name: Build and push images
        if: ${{ inputs.push }}
        run: |
          docker buildx build \
            --push \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME_AGENT_CONTROL:${{ inputs.image-tag }} \
            --file Dockerfiles/Dockerfile_agent_control \
            --attest type=provenance,mode=max \
            --attest type=sbom \
            .
          docker buildx build \
            --push \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME_AGENT_CONTROL_CLI:${{ inputs.image-tag }} \
            --file Dockerfiles/Dockerfile_agent_control_cli \
            --attest type=provenance,mode=max \
            --attest type=sbom \
            .

      - name: Build images
        if: ${{ ! inputs.push }}
        run: |
          docker buildx build \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME_AGENT_CONTROL:${{ inputs.image-tag }} \
            --file Dockerfiles/Dockerfile_agent_control \
            --attest type=provenance,mode=max \
            --attest type=sbom \
            .
          
          docker buildx build \
            --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME_AGENT_CONTROL_CLI:${{ inputs.image-tag }} \
            --file Dockerfiles/Dockerfile_agent_control_cli \
            --attest type=provenance,mode=max \
            --attest type=sbom \
            .
