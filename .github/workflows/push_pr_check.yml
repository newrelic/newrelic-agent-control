permissions:
  contents: read
on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
  workflow_call:
    inputs:
      block_endpoint:
        description: This endpoint should respond status 200 for the pre-release to continue.
        required: false
        type: string
        default: https://newrelic.github.io/coreint-automation/automatic_release_enable
    secrets:
      github_token:
        description: "github token"
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: checks
jobs:
  codespell:
    name: codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Codespell test
        uses: codespell-project/actions-codespell@94259cd8be02ad2903ba34a22d9c13de21a74461
  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt
          toolchain: ${{ env.RUST_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-checks
      - name: Check code formatting
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    name:  ${{ matrix.flag }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        # newrelic_agent_control needs either onhost or k8s feature, the rest of packages can be checked also without features
        flag: [ "--features=onhost", "--features=k8s", "--exclude='newrelic_agent_control'" ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-checks
          
      - name: cargo clippy (${{ matrix.flag }})
        run: cargo clippy --workspace ${{ matrix.flag }} --tests -- -D clippy::all

  doc:
    runs-on: ubuntu-latest
    name: stable / doc
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
  
      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-checks
          
      - name: Create on-host documentation
        run: cargo doc --no-deps --features=onhost --package newrelic_agent_control
        env:
          RUSTDOCFLAGS: --cfg docsrs
      - name: Create K8s documentation
        run: cargo doc --no-deps --features=k8s --package newrelic_agent_control
        env:
          RUSTDOCFLAGS: --cfg docsrs

  third-party-notices-check:
    runs-on: ubuntu-latest
    name: ⚖️ Check third party licenses
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Obtain Rust version from project
        run: |
          RUST_VERSION=$(grep "rust-version" Cargo.toml | cut -d "=" -f2 | tr -d "[:space:]")
          echo "RUST_VERSION=${RUST_VERSION}" >> $GITHUB_ENV

      - name: Install Rust ${{ env.RUST_VERSION }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-checks

      - name: Fetch dependencies
        run: cargo fetch

      - uses: newrelic/rust-licenses-noticer@v1
        id: license-verification
        with:
          template-file: THIRD_PARTY_NOTICES.md.tmpl
        continue-on-error: true

      - name: Correct and Update License Notices
        if: ${{ steps.license-verification.outcome == 'failure'}}
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          git branch
          git status
          make third-party-notices
          git config user.name 'renovate'
          git config user.email 'renovate@newrelic.com'
          git add THIRD_PARTY_NOTICES.md
          git commit -m "Update THIRD PARTY NOTICES due to license check failure"
          git push -u origin ${{ github.head_ref }}