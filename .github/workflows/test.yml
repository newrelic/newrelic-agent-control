permissions:
  contents: read
on:
# TODO: validate when to trigger the pipeline
  push:
# See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu / ${{ matrix.toolchain }}
    strategy:
      matrix:
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Give GitHub Actions access to private crates
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.CAOS_RUST_CRATES }}
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Run tests onHost excluding root-required tests
        run: cargo test --locked --features=onhost --all-targets -- --skip as_root
      - name: Run tests onK8s
        run: cargo test --locked --features=k8s  --all-targets
      - name: Run documentation tests onhost
        run: cargo test --locked --features=onhost  --doc
      - name: Run documentation tests k8st
        run: cargo test --locked --features=k8s --doc

  # Test using root can be troublesome to perform as usually the Rust toolchain is installed local to the user.
  # To test for root privileges, we can run from a container (disabling the test that fail if running non-root).
  test-with-root:
    runs-on: ubuntu-latest
    container: rust:latest
    name: tests as root
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Give GitHub Actions access to private crates
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.CAOS_RUST_CRATES }}
      - name: Run k8s root-required tests only
        run: cargo test --locked --features=k8s --all-targets
      - name: Run onHost root-required tests only
        run: cargo test --locked --features=onhost --all-targets -- --skip no_root
  # Windows and macos not required at the moment (ci failing while fetching
  # private crates)
  # os-check:
  #   runs-on: ${{ matrix.os }}
  #   name: ${{ matrix.os }} / stable
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, windows-latest]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Give GitHub Actions access to private crates
  #       uses: webfactory/ssh-agent@v0.8.0
  #       with:
  #         ssh-private-key: ${{ secrets.CAOS_RUST_CRATES }}
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo test
  #       run: cargo test --locked --all-features --all-targets -- --skip as_root
  #       env:
  #         # See: https://github.com/webfactory/ssh-agent#cargos-rust-private-dependencies-on-windows
  #         CARGO_NET_GIT_FETCH_WITH_CLI: true

  embedded:
    name: Unit test for embedded downloader
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Give GitHub Actions access to private crates
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.CAOS_RUST_CRATES }}
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'build/embedded/go.mod'
      - name: run tests for embedded downloader
        run: make -C build/embedded test

  k8s-integration-tests:
    name: K8s integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Give GitHub Actions access to private crates
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.CAOS_RUST_CRATES }}
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.10.0
        with:
          minikube version: v1.32.0
          kubernetes version: 'v1.28.1' # Should we support a specific range of versions?
          driver: docker
      - name: Run k8s integration tests
        run: make -C super-agent/test/k8s
