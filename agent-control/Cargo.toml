[package]
name = "newrelic_agent_control"
description = "New Relic Agent Control"
version = "1.2.0"
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
publish.workspace = true
license-file.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
clap = { workspace = true, features = ["derive"] }
serde = { workspace = true, features = ["derive"] }

thiserror = { workspace = true }
nix = { workspace = true, features = ["signal", "user", "hostname"] }
tracing-subscriber = { workspace = true, features = ["env-filter", "chrono"] }
tracing = { workspace = true, features = ["attributes"] }
ctrlc = { version = "3.5.0", features = ["termination"] }
serde_yaml = { workspace = true }
regex = { workspace = true }
futures = { version = "0.3.31" }
tokio = { version = "1.48.0", features = ["rt-multi-thread", "macros", "sync"] }
console-subscriber = { version = "0.5.0", optional = true }
duration-str = "0.17.0"
konst = { workspace = true }
http = { workspace = true }
reqwest = { workspace = true }
url = { version = "2.5.7", features = ["serde"] }
actix-web = "4.11.0"
serde_json = { workspace = true }
semver = { workspace = true, features = ["serde"] }
chrono = { workspace = true }
base64 = { version = "0.22.1" }
# New Relic dependencies (private external repos)
# IMPORTANT: GitHub deployment keys are used to access these repos on the CI/CD pipelines
nr-auth = { git = "https://github.com/newrelic/newrelic-auth-rs.git", tag = "0.1.1" }
opamp-client = { git = "https://github.com/newrelic/newrelic-opamp-rs.git", tag = "0.0.34" }
# local dependencies
fs = { path = "../fs" }
wrapper_with_default = { path = "../wrapper_with_default" }

# OnHost subagent dependencies
resource-detection = { path = "../resource-detection" }

# K8S subagent dependencies
kube = { version = "2.0.1", features = ["runtime", "derive", "ws"] }
k8s-openapi = { version = "0.26.0", features = ["v1_30"] }
either = { version = "1.15.0" }


crossbeam = { version = "0.8.4", features = ["crossbeam-channel"] }
tracing-appender = "0.2.3"
cfg-if = "1.0.4"
# HOST_ID and HOST_NAME attributes are experimental fields and after 0.26.0 are not included by default.
# Check <https://github.com/open-telemetry/opentelemetry-rust/pull/2098> for details.
opentelemetry-semantic-conventions = { version = "0.31.0", features = [
  "semconv_experimental",
] }
http-serde = "2.1.1"
config = { version = "0.15.18", features = ["yaml"] }
rustls = { version = "0.23.34", features = ["ring"] }
x509-parser = "0.18.0"
ring = "0.17.14"
bytes = "1.10.1"
opentelemetry = { version = "0.31.0", features = ["trace"] }
opentelemetry_sdk = { version = "0.31.0", features = ["trace"] }
tracing-opentelemetry = "0.32.0"
opentelemetry-otlp = { version = "0.31.0", features = ["reqwest-rustls"] }
opentelemetry-http = { version = "0.31.0" }
opentelemetry-appender-tracing = { version = "0.31.1", features = [
  "experimental_use_tracing_span_context",
] }
async-trait = "0.1.89"

[dev-dependencies]
assert_cmd = { workspace = true }
predicates = { workspace = true }
tower-test = { workspace = true }
tempfile = { workspace = true }
mockall = { workspace = true }
schemars = { workspace = true }
serde_json = { workspace = true }
assert_matches = { workspace = true }
mockall_double = { workspace = true }
tracing-test = { workspace = true }
jsonwebtoken = { workspace = true }
fs = { path = "../fs", features = ["mocks"] }
tokio = { version = "1.48.0", features = ["rt-multi-thread", "macros"] }
fake = { version = "4.4.0", features = ["derive", "http"] }
prost = "0.14.1"
httpmock = { version = "0.8.2", features = ["proxy"] }
serial_test = "3.2.0"
futures = "0.3.31"
rcgen = { version = "0.14.5", features = ["crypto"] }
rstest = "0.26.1"
tokio-stream = { version = "0.1.17", features = ["net"] }

[build-dependencies]
glob = "0.3.3"

[[bin]]
name = "newrelic-agent-control-k8s"
path = "src/bin/main_k8s.rs"

# On-host binary
# Due to a GoReleaser limitation, the generated binary here must have the same name as the final
# name we want to use in the generated and packaged assets.
# As our K8s build is more manual and does not have this problem, we can name the on-host binary
# just `newrelic-agent-control` while the K8s one is kept as `newrelic-agent-control-k8s`.
[[bin]]
name = "newrelic-agent-control"
path = "src/bin/main_onhost.rs"

[[bin]]
name = "newrelic-config-migrate"
path = "src/bin/main_config_migrate.rs"

[[bin]]
name = "newrelic-agent-control-k8s-cli"
path = "src/bin/main_agent_control_k8s_cli.rs"

[[bin]] # Same GoReleaser limitations as "newrelic-agent-control" apply here.
name = "newrelic-agent-control-cli"
path = "src/bin/main_agent_control_onhost_cli.rs"

[features]
# feature tokio-console allows debugging tokio tasks using tokio-console
tokio-console = ["tokio/full", "tokio/tracing", "dep:console-subscriber"]
# feature multiple-instances avoids checking if more than one agent-control process is running at a time
multiple-instances = []
# Disable the need to run AC as root. Useful for testing and development.
disable-asroot = []
