use std::{collections::HashMap, path::PathBuf};

use tracing::debug;

use crate::agent_control::agent_id::SubAgentID;

use super::variable::{Variable, namespace::Namespace};

/// contains any attribute from the sub-agent that is used to build or modify variables used to template the AgentType.
#[derive(Debug, PartialEq, Clone)]
pub struct SubAgentAttributes {
    /// sub-agent Agent ID
    sub_agent_id: SubAgentID,
    auto_generated_dir: PathBuf,
}

impl SubAgentAttributes {
    pub const VARIABLE_SUB_AGENT_ID: &'static str = "agent_id";
    pub const GENERATED_DIR: &'static str = "autogenerated_agent_dir";

    pub fn new(sub_agent_id: SubAgentID, auto_generated_dir: PathBuf) -> Self {
        let auto_generated_dir = auto_generated_dir.join(&sub_agent_id);
        debug!(id = %sub_agent_id, "auto-generated directory path set to {}", auto_generated_dir.display());
        Self {
            sub_agent_id,
            auto_generated_dir,
        }
    }

    /// returns the variables from the sub-agent attributes source 'nr-sub'.
    pub fn sub_agent_variables(&self) -> HashMap<String, Variable> {
        HashMap::from([
            (
                Namespace::SubAgent.namespaced_name(Self::VARIABLE_SUB_AGENT_ID),
                Variable::new_final_string_variable(&self.sub_agent_id),
            ),
            (
                Namespace::SubAgent.namespaced_name(Self::GENERATED_DIR),
                Variable::new_final_string_variable(self.auto_generated_dir.to_string_lossy()),
            ),
        ])
    }
}
