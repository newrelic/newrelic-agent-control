project_name: newrelic-agent-control
env:
  # Artifacts Versions
  # Currently the only way to update the sub-agent versions is rebuild the binary of the agent-control
  - NEWRELIC_INFRA_AGENT_VERSION=1.65.0
  - NR_OTEL_COLLECTOR_VERSION=1.1.0
  - NR_AUTH_CLIENT_VERSION=0.0.7
  #
builds:
  - id: newrelic-agent-control
    main: ./build/dummy.go
    goos:
      - linux
    goarch:
      - arm64
      - amd64
    binary: newrelic-agent-control
    hooks:
      post:
        - cmd: sh ./build/scripts/build_binary.sh
          env:
            - ARCH={{ .Arch }}
            - BIN=newrelic-agent-control-onhost
            - AGENT_CONTROL_VERSION={{ .Version }}
            - NEWRELIC_INFRA_AGENT_VERSION={{ .Env.NEWRELIC_INFRA_AGENT_VERSION }}
            - NR_OTEL_COLLECTOR_VERSION={{ .Env.NR_OTEL_COLLECTOR_VERSION }}
            - NR_AUTH_CLIENT_VERSION={{ .Env.NR_AUTH_CLIENT_VERSION }}
            - PKG=newrelic_agent_control
        - cmd: sh ./build/scripts/replace_go_with_rust.sh
          env:
            - ARCH={{ .Arch }}
            - BIN=newrelic-agent-control
        - cmd: sh ./build/scripts/download_embedded.sh
          env:
            - ARCH={{ .Arch }}
            - ARTIFACTS_VERSIONS={"newrelic-infra":"{{ .Env.NEWRELIC_INFRA_AGENT_VERSION }}","nr-otel-collector":"{{ .Env.NR_OTEL_COLLECTOR_VERSION }}","newrelic-auth-cli":"{{ .Env.NR_AUTH_CLIENT_VERSION }}"}
        - cmd: sh ./build/scripts/download_collector_config.sh
          env:
            - NR_OTEL_COLLECTOR_VERSION={{ .Env.NR_OTEL_COLLECTOR_VERSION }}
  - id: newrelic-config-migrate
    main: ./build/dummy.go
    goos:
      - linux
    goarch:
      - arm64
      - amd64
    binary: newrelic-config-migrate
    hooks:
      post:
        - cmd: sh ./build/scripts/build_binary.sh
          env:
            - ARCH={{ .Arch }}
            - BIN=newrelic-config-migrate
            - PKG=newrelic_agent_control
            - AGENT_CONTROL_VERSION={{ .Version }}
        - cmd: sh ./build/scripts/replace_go_with_rust.sh
          env:
            - ARCH={{ .Arch }}
            - BIN=newrelic-config-migrate
archives:
  - format: tar.gz
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    builds:
      - newrelic-agent-control
      - newrelic-config-migrate

nfpms:
  - package_name: newrelic-agent-control

    # Replace arch for rpm from amd64 to x86_64 to be consistent with our rpm repo.
    file_name_template: >-
      {{ .PackageName }}_{{ .Version }}_{{ .Os }}_
      {{- if not (eq (filter .ConventionalFileName "\\.rpm$") "") }}
        {{- replace .Arch "amd64" "x86_64" }}
      {{- else }}
        {{- .Arch }}
      {{- end }}
      {{- with .Arm }}v{{ . }}{{- end }}
      {{- with .Mips }}_{{ . }}{{- end }}
      {{- if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{- end }}

    contents:
      # Newrelic Agent Control
      - dst: /etc/newrelic-agent-control
        type: dir
        file_info:
          mode: 0700
      - src: build/package/config.yaml
        dst: /etc/newrelic-agent-control/config.yaml
        type: config
        file_info:
          mode: 0600
      - src: build/package/newrelic-agent-control.service
        dst: /lib/systemd/system/newrelic-agent-control.service
      - src: build/package/newrelic-agent-control.conf
        dst: /etc/newrelic-agent-control/newrelic-agent-control.conf
        type: config|noreplace
        file_info:
          mode: 0600
      - dst: /etc/newrelic-agent-control/fleet/agents.d
        type: dir
        file_info:
          mode: 0700
      - src: LICENSE.md
        dst: /usr/share/doc/newrelic/newrelic-agent-control/LICENSE.md
      - dst: /var/lib/newrelic-agent-control
        type: dir
        file_info:
          mode: 0700
      - dst: /var/lib/newrelic-agent-control/fleet/agents.d
        type: dir
        file_info:
          mode: 0700
      - dst: /var/lib/newrelic-agent-control/auto-generated
        type: dir
        file_info:
          mode: 0700
      # Infra Agent
      - src: build/embedded/artifacts/{{- .Arch }}/newrelic-infra/newrelic-infra
        dst: /usr/bin/newrelic-infra
      - src: build/embedded/artifacts/{{- .Arch }}/newrelic-infra/LICENSE.txt
        dst: /var/db/newrelic-infra/LICENSE.txt
      # nri-docker
      - src: build/embedded/artifacts/{{- .Arch }}/nri-docker
        dst: /var/db/newrelic-infra/newrelic-integrations/bin/nri-docker
      - src: build/embedded/artifacts/{{- .Arch }}/docker-config.yml
        dst: /etc/newrelic-infra/integrations.d/docker-config.yml
        type: config
      # nri-flex
      - src: build/embedded/artifacts/{{- .Arch }}/nri-flex
        dst: /var/db/newrelic-infra/newrelic-integrations/bin/nri-flex
      # nri-prometheus
      - src: build/embedded/artifacts/{{- .Arch }}/nri-prometheus
        dst: /var/db/newrelic-infra/newrelic-integrations/bin/nri-prometheus
      # fluent-bit / logging
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/out_newrelic.so
        dst: /var/db/newrelic-infra/newrelic-integrations/logging/out_newrelic.so
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/parsers.conf
        dst: /var/db/newrelic-infra/newrelic-integrations/logging/parsers.conf
        type: config
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/file.yml.example
        dst: /etc/newrelic-infra/logging.d/file.yml.example
        type: config
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/fluentbit.yml.example
        dst: /etc/newrelic-infra/logging.d/fluentbit.yml.example
        type: config
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/syslog.yml.example
        dst: /etc/newrelic-infra/logging.d/syslog.yml.example
        type: config
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/systemd.yml.example
        dst: /etc/newrelic-infra/logging.d/systemd.yml.example
        type: config
      - src: build/embedded/artifacts/{{- .Arch }}/fluent-bit/tcp.yml.example
        dst: /etc/newrelic-infra/logging.d/tcp.yml.example
        type: config
      - dst: /var/log/newrelic-infra
        type: dir
      - dst: /var/run/newrelic-infra
        type: dir
      - dst: /var/db/newrelic-infra/custom-integrations
        type: dir
      - dst: /var/db/newrelic-infra/integrations.d
        type: dir
      # NR Otel Collector - Important to note the binary name is nrdot-collector-host matching nrdot binary
      - src: build/embedded/artifacts/{{- .Arch }}/nr-otel-collector/nrdot-collector-host
        dst: /usr/bin/nrdot-collector-host
      - src: build/embedded/artifacts/{{- .Arch }}/newrelic-auth-cli
        dst: /usr/bin/newrelic-auth-cli
      - src: build/examples/
        dst: /etc/newrelic-agent-control/examples

    scripts:
      postinstall: build/package/postinstall.sh
      postremove: build/package/postremove.sh
      preremove: build/package/preremove.sh

    provides:
      - newrelic-infra (= 3.0.0)
      - nr-otel-collector (= 2.0.0)
    conflicts:
      - newrelic-infra
      - nr-otel-collector
    replaces:
      - newrelic-infra
      - nr-otel-collector

    recommends:
      - td-agent-bit #To be removed on removal of the ff fluent_bit_19
      - fluent-bit

    id: newrelic-agent-control
    builds:
      - newrelic-agent-control
      - newrelic-config-migrate
    formats:
      - deb
      - rpm
    maintainer: New Relic <caos-team@newrelic.com>
    description: New Relic Agent Control - newrelic-agent-control
    license: Apache 2.0

signs:
  - id: checksums

    # Path to the checksum command.
    cmd: ./build/scripts/generate_checksum.sh
    args: ["-f", "{{ .Env.artifact }}"]
    artifacts: all
  - id: signing

    # Path to the signature command.
    cmd: ./build/scripts/signing/sign.sh
    args:
      [
        "-f",
        "{{ .Env.artifact }}",
        "-m",
        "{{ .Env.GPG_MAIL }}",
        "-p",
        "{{ .Env.GPG_PASSPHRASE }}",
        "-k",
        "{{ .Env.GPG_PRIVATE_KEY_BASE64 }}",
      ]
    artifacts: all

publishers:
  - name: GH Publisher
    cmd: ./build/scripts/gh_publisher.sh -t {{ .Env.NR_RELEASE_TAG }} -f {{ abs .ArtifactPath }}
    extra_files:
      - glob: "./dist/*.asc"
      - glob: "./dist/*.sum"
    env:
      - GITHUB_TOKEN={{ .Env.GITHUB_TOKEN }}

release:
  disable: true

# Disable default checksum generator as we use a custom one per each artifact.
checksum:
  disable: true

# Skip auto-generating changelog.
changelog:
  skip: true
